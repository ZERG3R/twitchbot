import psycopg2
import datetime

import encryption_key
import viewer_data


def connect_to_db():
    return psycopg2.connect(database=encryption_key.database,
                            user=encryption_key.user,
                            password=encryption_key.password,
                            host=encryption_key.host,
                            port=encryption_key.port)


def create_main_db() -> None:
    conn = connect_to_db()

    conn.autocommit = True

    c = conn.cursor()

    c.execute(
        "CREATE TABLE Commands (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Command_Trigger TEXT, "
        "Response TEXT)"
    )

    c.execute(
        "CREATE TABLE Earned_Streamer_Achievements (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Date_Earned DATE, "
        "Achievement_Num INT)"
    )

    c.execute(
        "CREATE TABLE Earned_Viewer_Achievements (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Viewer_ID INT, "
        "Date_Earned DATE, "
        "Achievement_Num INT)"
    )

    c.execute(
        "CREATE TABLE Achievements (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "User_Type TEXT, "
        "Achievement TEXT)"
    )

    c.execute(
        "CREATE TABLE Trivia (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Question TEXT, "
        "Answer TEXT)"
    )

    c.execute(
        "CREATE TABLE Viewer_Data (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Viewer_ID INT, "
        "Viewer_Name TEXT, "
        "Display_Name TEXT, "
        "User_Type TEXT, "
        "Join_Date DATE, "  # leave this as joined date
        "Follow_Date DATE, "  # use this as follow date
        "Last_Seen DATE, "
        "Join_Game TEXT, "
        "Points INT, "
        "Honor INT, "
        "Join_Message TEXT, "
        "Invited_By TEXT, "
        "Trivia_Answered INT)"
    )

    c.execute(
        "CREATE TABLE Viewer_Chat (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Viewer_ID INT, "
        "Timestamp TIMESTAMP, "
        "Message TEXT, "
        "Game TEXT)"
    )

    c.execute(
        "CREATE TABLE Daily_Data (ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, "
        "Streamer_ID INT, "
        "Viewer_ID INT, "
        "Date DATE, "
        "Game TEXT, "
        "active_seconds INT,"
        "inactive_seconds INT)"
    )

    conn.commit()
    conn.close()


async def update_sql(live_streamers_dict, date, auth_token):
    conn = connect_to_db()
    c = conn.cursor()

    """
    need this print here to test/check that the streamer object isn't erased until after all data is removed
    """
    # print(102, live_streamers_dict)
    for streamer in live_streamers_dict:
        streamer_obj = live_streamers_dict[streamer]
        streamer_id = live_streamers_dict[streamer].viewer_objects[streamer].twitch_id
        for viewer in live_streamers_dict[streamer].viewer_objects:
            viewer_obj = live_streamers_dict[streamer].viewer_objects[viewer]
            viewer_id = viewer_obj.twitch_id
            insert_user(c, streamer_obj, viewer_obj, date, viewer_id)
            save_daily_data(c, streamer_id, viewer_obj, date, viewer_id)
            save_chat(c, streamer_id, viewer_obj, viewer_id)
            save_honor(c, streamer_id, viewer_obj, viewer_id)
            check_follow_date(c, streamer_obj, auth_token)
    if len(live_streamers_dict.keys()) > 0:
        print("sql_commands", date, "SQL DATA SAVED")
    conn.commit()
    conn.close()


def insert_user(c, streamer_obj, viewer_obj, date, viewer_id):
    streamer_id = streamer_obj.twitch_id
    c.execute("SELECT viewer_id FROM viewer_data WHERE streamer_id=%s AND viewer_id=%s", (streamer_id, viewer_id))
    str_viewer_id = c.fetchone()
    if str_viewer_id is None:
        viewer_name = viewer_obj.name
        display_name = viewer_obj.display_name
        join_date = date.date()
        c.execute("INSERT INTO viewer_data ("
                  "streamer_id, "
                  "viewer_id, "
                  "viewer_name, "
                  "display_name, "
                  "join_date, "
                  "join_game, "
                  "honor, "
                  "last_seen) "
                  "VALUES(%s, %s, %s, %s, %s, %s, %s, %s)",
                  (streamer_id,
                   viewer_id,
                   viewer_name,
                   display_name,
                   join_date,
                   streamer_obj.game_name,
                   0,
                   join_date))


def save_daily_data(c, streamer_id, viewer_obj, date, viewer_id):
    for game in viewer_obj.active_seconds_per_game:
        if game in viewer_obj.inactive_seconds_per_game:
            inactive_seconds = viewer_obj.inactive_seconds_per_game[game]
        else:
            inactive_seconds = 0
        active_seconds = viewer_obj.active_seconds_per_game[game]
        curr_date = date.date()
        if type(streamer_id) != str or type(viewer_id) != str or type(curr_date) != datetime.date or type(game) != str:
            print(f"149, sql_commands, {type(streamer_id)}:{streamer_id}, "
                  f"{type(viewer_id)}:{viewer_id}, "
                  f"{type(curr_date)}:{curr_date}, "
                  f"{type(game)}:{game}")
        c.execute("SELECT active_seconds FROM daily_data WHERE streamer_id=%s AND viewer_id=%s AND date=%s AND game=%s",
                  (streamer_id, viewer_id, curr_date, game))
        str_seconds = c.fetchone()
        if str_seconds is None:
            c.execute("INSERT INTO daily_data ("
                      "streamer_id, "
                      "viewer_id, "
                      "date, "
                      "game, "
                      "active_seconds, "
                      "inactive_seconds) "
                      "VALUES(%s, %s, %s, %s, %s, %s)", (streamer_id,
                                                         viewer_id,
                                                         curr_date,
                                                         game,
                                                         active_seconds,
                                                         inactive_seconds))
            viewer_obj.active_seconds_per_game[game] = 0
            viewer_obj.inactive_seconds_per_game[game] = 0

        else:
            c.execute("UPDATE daily_data SET "
                      "active_seconds=active_seconds + %s, "
                      "inactive_seconds=inactive_seconds + %s "
                      "WHERE "
                      "streamer_id=%s AND "
                      "viewer_id=%s AND "
                      "date=%s AND "
                      "game=%s",
                      (active_seconds,
                       inactive_seconds,
                       streamer_id,
                       viewer_id,
                       curr_date,
                       game))
            viewer_obj.active_seconds_per_game[game] = 0
            viewer_obj.inactive_seconds_per_game[game] = 0


def save_chat(c, streamer_id, viewer_obj, viewer_id):
    for game in viewer_obj.chat:
        for sublist in range(len(viewer_obj.chat[game])):

            timestamp = viewer_obj.chat[game][sublist][0].strftime("%Y-%m-%d %H:%M:%S")  # timestamp
            chatline = viewer_obj.chat[game][sublist][1]  # chatline

            c.execute("INSERT INTO viewer_chat ("
                      "streamer_id, "
                      "viewer_id, "
                      "timestamp, "
                      "message, "
                      "game) "
                      "VALUES(%s, %s, %s, %s, %s)",
                      (streamer_id,
                       viewer_id,
                       timestamp,
                       chatline,
                       game))

        viewer_obj.chat[game] = []


def save_honor(c, streamer_id, viewer_obj, viewer_id):
    c.execute("UPDATE viewer_data SET honor=honor + %s "
              "WHERE "
              "streamer_id=%s AND "
              "viewer_id=%s",
              (viewer_obj.honor,
               streamer_id,
               viewer_id))
    viewer_obj.honor = 0


def get_viewer_ids_per_streamer(streamer_id):
    conn = connect_to_db()
    c = conn.cursor()
    c.execute("SELECT viewer_id FROM viewer_data WHERE streamer_id=%s", (streamer_id,))
    all_ids = c.fetchall()
    conn.close()
    return all_ids


def check_follow_date(c, streamer_obj, auth_token):

    """
    false if not checked yet, none if not followed, otherwise there is a date
    need the check as a flag for sql to know we already wrote to the DB the date
    """

    viewer_objects = streamer_obj.viewer_objects
    for viewer in viewer_objects:
        if viewer_objects[viewer].followed_date is False:
            viewer_id = viewer_objects[viewer].twitch_id
            c.execute("SELECT follow_date FROM viewer_data WHERE viewer_id=%s AND streamer_id=%s",
                      (viewer_id,
                       streamer_obj.twitch_id))
            sql_follow_date = c.fetchone()

            follow_date = viewer_data.get_follow_date(viewer_id, streamer_obj.twitch_id, auth_token)
            viewer_objects[viewer].followed_date = follow_date
            if sql_follow_date is None:
                if viewer_objects[viewer].followed_date is not None and \
                   viewer_objects[viewer].follow_check is False:

                    c.execute("UPDATE viewer_data SET follow_date=%s WHERE streamer_id=%s AND viewer_id=%s",
                              (viewer_objects[viewer].followed_date,
                               streamer_obj.twitch_id,
                               viewer_objects[viewer].twitch_id))
                viewer_objects[viewer].follow_check = True
            else:
                # print(275, "sql_commands", sql_follow_date)
                viewer_objects[viewer].followed_date = sql_follow_date[0]
                viewer_objects[viewer].follow_check = True


def update_bots():  # time based
    conn = connect_to_db()
    c = conn.cursor()

    c.execute("SELECT DISTINCT viewer_id FROM daily_data WHERE game NOT IN ('Offline') "
              "GROUP BY viewer_id HAVING COALESCE (SUM(Seconds), 0) > 180000 "
              "AND COALESCE (SUM(Chat), 0) < 100")

    bad_bots = c.fetchall()
    good_bots = ["nightbot", "moobot", encryption_key.decrypted_nick, "zerg3rrbot", "giphertius"]
    for i in bad_bots:
        if i[0] not in good_bots:
            c.execute("UPDATE ViewerData SET User_Type = 'BadBot' WHERE UID = ?", (i[0],))

    for i in good_bots:
        c.execute("UPDATE ViewerData Set User_Type = 'GoodBot' WHERE User_Name = ?", (i,))

    conn.commit()
    conn.close()
